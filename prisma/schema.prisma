// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Donations {
  id          String @id @default(uuid()) @map("_id")
  name        String
  email       String
  phoneNumber String
  gender      String
  birth       String
  country     String
  state       String
  city        String
  address     String
  cpf         String
  rg          String

  valuePaid     Int
  paymentMethod String
  paymentStatus String
  paymentDate   String

  donationExpirationDate String

  stripeCustomerID String
  createdAt        DateTime @default(now())

  @@map("Donations")
}

model Students {
  id          String @id @default(uuid()) @map("_id")
  name        String
  email       String @unique
  gender      String
  birth       String
  phoneNumber String
  country     String
  state       String
  city        String
  address     String

  cpf                      String
  rg                       String
  selfDeclaration          String
  oldSchool                String
  oldSchoolAdress          String
  highSchoolGraduationDate String
  highSchoolPeriod         String
  metUsMethod              String
  exStudent                String
  stripeCustomerID         String

  purcharsedSubscriptions PurchasedSubscriptions[]
  createdAt               DateTime                 @default(now())

  @@map("Students")
}

model Admins {
  id            String        @id @default(uuid()) @map("_id")
  name          String
  email         String        @unique
  username      String        @unique
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now())
  refresh_token RefreshToken?

  @@map("Admins")
}

model RefreshToken {
  id         String @id @default(uuid()) @map("_id")
  expires_at Int
  admin      Admins @relation(fields: [adminID], references: [id])
  adminID    String @unique

  @@map("refresh_token")
}

model SchoolClass {
  id                 String      @id @default(uuid()) @map("_id")
  title              String
  description        String
  initHour           String
  endHour            String
  daysOfWeek         String
  registrationStatus String
  subscriptionPrice  Int
  semester           String
  year               String
  stripeProductID    String
  documents          Documents[]

  @@map("SchoolClass")
}

model Documents {
  id            String       @id @default(uuid()) @map("_id")
  title         String
  downloadLink  String
  SchoolClass   SchoolClass? @relation(fields: [schoolClassId], references: [id])
  schoolClassId String?

  @@map("Documents")
}

type PurchasedSubscriptions {
  schoolClassID String
  productID     String
  productName   String
  paymentMethod String
  paymentStatus String
  paymentDate   String
  valuePaid     Int
}
